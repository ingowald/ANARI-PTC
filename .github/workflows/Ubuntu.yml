# Compile project on Ubuntu
name: Ubuntu
on:
  push:
    branches:
      - ci-build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 24.04 supports CUDA 12.4+
          - os: ubuntu-24.04
            cuda: "12.6"
            gcc: 13
          # 22.04 supports CUDA 11.7+
          - os: ubuntu-22.04
            cuda: "12.0"
            gcc: 11
          - os: ubuntu-22.04
            cuda: "11.8"
            gcc: 10
          - os: ubuntu-22.04
            cuda: "11.7"
            gcc: 10
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.6"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.5"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.4"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.3"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.2"
            gcc: 10
          - os: ubuntu-20.04
            cuda: "11.0"
            gcc: 9
    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v3

    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: .github/scripts/actions/install_cuda_ubuntu.sh
      shell: bash

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Build/Install MPI
      run: sudo apt-get install -y libopenmpi-dev
      shell: bash

    - name: Build/Install ANARI SDK
      run: |
        git clone https://github.com/KhronosGroup/ANARI-SDK
        cd ANARI-SDK
	mkdir builddir
	cmake . -B builddir -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_ARCHITECTURES=all-major install
      shell: bash

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DCMAKE_CUDA_ARCHITECTURES=all-major

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      run: |
          if [[ -d "${{ env.build_dir }}" ]]; then
            pushd "${{ env.build_dir }}"
            if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
              echo "---- CMakeFiles/CMakeOutput.log"
              cat CMakeFiles/CMakeOutput.log
              echo "----"
            fi
            if [[ -f "CMakeFiles/CMakeError.log" ]]; then
              echo "---- CMakeFiles/CMakeError.log"
              cat CMakeFiles/CMakeError.log
              echo "----"
            fi
          fi



    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

